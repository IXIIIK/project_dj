# cards/models.py
from django.db import models
from django.utils.text import slugify
from urllib.parse import urlencode, urlparse, urlunparse, parse_qsl
import re
import idna

class Showcase(models.Model):
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏—Ç—Ä–∏–Ω—ã")
    slug = models.SlugField(
        "URL-–∏–º—è (–ø–æ—Å–ª–µ —Å–ª–µ—à–∞)",
        max_length=64,
        unique=False,
        blank=True,   # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        null=True,
        help_text="–¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å. –ü—Ä–∏–º–µ—Ä: zaimy-moskva",
    )
    extra_params = models.CharField(
        max_length=255,
        blank=True,
        help_text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ GET-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: aff_id=42&sub=abc)"
    )
    created_at = models.DateTimeField(auto_now_add=True)
    domains = models.TextField(blank=True, default='')
    # üëá –Ω–æ–≤–æ–µ –ø–æ–ª–µ
    template = models.CharField(
        max_length=50,
        default="",
        blank=True,
        help_text="–ò–º—è –ø–∞–ø–∫–∏ —Ç–µ–º—ã –∏–∑ cards/templates/themes/<template>/"
    )
    class Meta:
        constraints = [
                models.UniqueConstraint(
                    fields=["domains", "slug"],
                    name="uniq_showcase_per_domain",
                ),
            ]

    def __str__(self):
        return self.name or f"–í–∏—Ç—Ä–∏–Ω–∞ {self.pk}"
    
    def domains_list(self):
        """–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –∏–∑ –ø–æ–ª—è domains (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª/–ø–µ—Ä–µ–Ω–æ—Å—ã)."""
        out = []
        for line in (self.domains or "").splitlines():
            line = line.strip()
            if not line:
                continue
            try:
                out.append(idna.decode(line))
            except Exception:
                out.append(line)
        return out
    
    def domains_pairs(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (ascii_host_for_link, human_label) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞.
        –í –ë–î –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ punycode, —Ç–∞–∫ –∏ —é–Ω–∏–∫–æ–¥ ‚Äî —Ç—É—Ç –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±–∞ —Å–ª—É—á–∞—è.
        """
        pairs = []
        try:
            import idna
        except Exception:
            idna = None

        for raw in self.domains_list():
            ascii_host = raw
            label = raw
            if idna:
                # –ø—Ä–∏–≤–æ–¥–∏–º –∫ ascii (punycode) –¥–ª—è href
                try:
                    ascii_host = idna.encode(raw, uts46=True).decode("ascii")
                except Exception:
                    ascii_host = raw
                # –∏ –ø–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –º–µ—Ç–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                try:
                    label = idna.decode(ascii_host)
                except Exception:
                    label = raw
            pairs.append((ascii_host, label))
        return pairs

    def save(self, *args, **kwargs):
        if not self.slug:
            base = slugify(self.name or "") or "showcase"
            cand, n = base, 2
            while Showcase.objects.filter(slug=cand).exclude(pk=self.pk).exists():
                cand = f"{base}-{n}"; n += 1
            self.slug = cand
        super().save(*args, **kwargs)



class Logo(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=255)
    image = models.ImageField("–§–∞–π–ª", upload_to="logos/")

    def __str__(self):
        return self.name or f"–õ–æ–≥–æ—Ç–∏–ø {self.pk}"


class Card(models.Model):
    showcase = models.ForeignKey(
        Showcase,
        on_delete=models.CASCADE,
        related_name="cards",
        null=True,
        blank=True,
        verbose_name="–í–∏—Ç—Ä–∏–Ω–∞"
    )
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=255)
    price = models.PositiveIntegerField("–¶–µ–Ω–∞", default=0)
    rate_line = models.CharField("–°—Ç–∞–≤–∫–∞", max_length=255, default="0% –≤ –¥–µ–Ω—å", blank=True)
    age_line = models.CharField("–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", max_length=255, default="–æ—Ç 18 –ª–µ—Ç", blank=True)
    btn_text = models.CharField("–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏", max_length=100, default="–ü–û–õ–£–ß–ò–¢–¨ –î–ï–ù–¨–ì–ò", blank=True)
    btn_url = models.URLField(
        "–°—Å—ã–ª–∫–∞",
        max_length=500,
        blank=True,
        null=True,
        help_text="–ü—Ä–∏–º–µ—Ä: partner.ru/apply –∏–ª–∏ –ø–æ–ª–Ω—ã–π https://partner.ru/apply. –°—Ö–µ–º–∞ –¥–æ–±–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    fine_print = models.CharField(
        "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –º–µ–ª–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º",
        max_length=255,
        default="–†–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.",
        blank=True
    )
    logo = models.ImageField("–õ–æ–≥–æ—Ç–∏–ø", upload_to="logos/", blank=True, null=True)
    order_index = models.IntegerField("–ü–æ—Ä—è–¥–æ–∫", default=0)
    active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–∞", default=True)
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)
    logo = models.ForeignKey(
        "Logo",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="cards",
        verbose_name="–õ–æ–≥–æ—Ç–∏–ø"
    )

    class Meta:
        ordering = ["order_index", "id"]
        verbose_name = "–ö–∞—Ä—Ç–æ—á–∫–∞"
        verbose_name_plural = "–ö–∞—Ä—Ç–æ—á–∫–∏"


    def __str__(self):
        return self.title
    
    @property
    def get_full_btn_url(self):
            """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É:
            - –µ—Å–ª–∏ —Å—Ö–µ–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º https://
            - –ø—Ä–∏–∫–ª–µ–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ showcase.extra_params
            """
            raw = (self.btn_url or "").strip()
            if not raw:
                return ""

            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç partner.ru/path ‚Äî –¥–æ–±–∞–≤–∏–º —Å—Ö–µ–º—É
            p = urlparse(raw)
            if not p.scheme:
                raw = "https://" + raw.lstrip("/")
                p = urlparse(raw)

            # –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç netloc (–Ω–∞–ø—Ä–∏–º–µ—Ä, '/path') ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
            if not p.netloc:
                return raw  # –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å "" –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–∫—Ä—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É

            # —Ç–µ–∫—É—â–∏–µ query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å—Å—ã–ª–∫–∏
            query = dict(parse_qsl(p.query, keep_blank_values=True))

            # –ø—Ä–∏–∫–ª–µ–∏–º –¥–æ–ø. –º–µ—Ç–∫–∏ –∏–∑ –≤–∏—Ç—Ä–∏–Ω—ã
            extra = (self.showcase.extra_params or "").strip().lstrip("?&")
            if extra:
                extra_qs = dict(parse_qsl(extra, keep_blank_values=True))
                query.update(extra_qs)

            # —Å–æ–±–µ—Ä—ë–º –Ω–∞–∑–∞–¥
            p = p._replace(query=urlencode(query, doseq=True))
            return urlunparse(p)
        

