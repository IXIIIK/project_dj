# cards/models.py
from django.db import models
from django.utils.text import slugify
import re

class Showcase(models.Model):
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏—Ç—Ä–∏–Ω—ã")
    slug = models.SlugField(
        "URL-–∏–º—è (–ø–æ—Å–ª–µ —Å–ª–µ—à–∞)",
        max_length=64,
        unique=False,
        blank=True,   # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        null=True,
        help_text="–¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å. –ü—Ä–∏–º–µ—Ä: zaimy-moskva",
    )
    created_at = models.DateTimeField(auto_now_add=True)
    domains = models.TextField(blank=True, help_text="–î–æ–º–µ–Ω(—ã) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
    # üëá –Ω–æ–≤–æ–µ –ø–æ–ª–µ
    template = models.CharField(
        max_length=50,
        default="",
        blank=True,
        help_text="–ò–º—è –ø–∞–ø–∫–∏ —Ç–µ–º—ã –∏–∑ cards/templates/themes/<template>/"
    )

    def __str__(self):
        return self.name or f"–í–∏—Ç—Ä–∏–Ω–∞ {self.pk}"
    
    def domains_list(self):
        """–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –∏–∑ –ø–æ–ª—è domains (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª/–ø–µ—Ä–µ–Ω–æ—Å—ã)."""
        return [h.strip() for h in re.split(r"[,\s]+", self.domains or "") if h.strip()]
    
    def domains_pairs(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (ascii_host_for_link, human_label) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞.
        –í –ë–î –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ punycode, —Ç–∞–∫ –∏ —é–Ω–∏–∫–æ–¥ ‚Äî —Ç—É—Ç –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±–∞ —Å–ª—É—á–∞—è.
        """
        pairs = []
        try:
            import idna
        except Exception:
            idna = None

        for raw in self.domains_list():
            ascii_host = raw
            label = raw
            if idna:
                # –ø—Ä–∏–≤–æ–¥–∏–º –∫ ascii (punycode) –¥–ª—è href
                try:
                    ascii_host = idna.encode(raw, uts46=True).decode("ascii")
                except Exception:
                    ascii_host = raw
                # –∏ –ø–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –º–µ—Ç–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                try:
                    label = idna.decode(ascii_host)
                except Exception:
                    label = raw
            pairs.append((ascii_host, label))
        return pairs

    def save(self, *args, **kwargs):
        if not self.slug:
            base = slugify(self.name or "") or "showcase"
            cand, n = base, 2
            while Showcase.objects.filter(slug=cand).exclude(pk=self.pk).exists():
                cand = f"{base}-{n}"; n += 1
            self.slug = cand
        super().save(*args, **kwargs)


class Card(models.Model):
    # üëá –Ω–æ–≤–æ–µ –ø–æ–ª–µ
    showcase = models.ForeignKey(
        Showcase, on_delete=models.CASCADE, related_name="cards",
        null=True, blank=True
    )
    title = models.CharField(max_length=255)
    price = models.PositiveIntegerField(default=0)
    rate_line = models.CharField(max_length=255, default="0% –≤ –¥–µ–Ω—å", blank=True)
    age_line = models.CharField(max_length=255, default="–æ—Ç 18 –ª–µ—Ç", blank=True)
    btn_text = models.CharField(max_length=100, default="–ü–û–õ–£–ß–ò–¢–¨ –î–ï–ù–¨–ì–ò", blank=True)
    btn_url = models.URLField(blank=True, null=True)
    fine_print = models.CharField(max_length=255, default="–†–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.", blank=True)
    logo = models.ImageField(upload_to="logos/", blank=True, null=True)
    order_index = models.IntegerField(default=0)
    active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ["order_index","id"]

    def __str__(self):
        return self.title
    

